// Code generated by gotestmd DO NOT EDIT.
package floating

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/floating/dns"
	"github.com/networkservicemesh/integration-tests/suites/floating/spire"
)

type Suite struct {
	base.Suite
	dnsSuite   dns.Suite
	spireSuite spire.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite, &s.dnsSuite, &s.spireSuite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
	r := s.Runner("../deployments-k8s/examples/floating")
	s.T().Cleanup(func() {
		r.Run(`export KUBECONFIG=$KUBECONFIG1`)
		r.Run(`kubectl delete ns nsm-system`)
		r.Run(`export KUBECONFIG=$KUBECONFIG2`)
		r.Run(`kubectl delete ns nsm-system`)
		r.Run(`export KUBECONFIG=$KUBECONFIG3`)
		r.Run(`kubectl delete ns nsm-system`)
	})
	r.Run(`export KUBECONFIG=$KUBECONFIG1`)
	r.Run(`kubectl create ns nsm-system`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/registry-k8s-sa \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:registry-k8s-sa`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/nsmgr-proxy-sa \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:nsmgr-proxy-sa`)
	r.Run(`kubectl apply -k .`)
	r.Run(`node=$(kubectl get pods -n nsm-system -l app=registry -o go-template='{{index (index (index  .items 0) "spec") "nodeName"}}')`)
	r.Run(`ip=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "ExternalIP"}}{{.address}}{{end}}{{end}}')` + "\n" + `echo Selected node IP: ${ip:=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "InternalIP"}}{{.address}}{{end}}{{end}}')}`)
	r.Run(`cat > registry-service.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: v1` + "\n" + `kind: Service` + "\n" + `metadata:` + "\n" + `  namespace: nsm-system` + "\n" + `  name: registry` + "\n" + `spec:` + "\n" + `  externalIPs:` + "\n" + `    - $ip` + "\n" + `  selector:` + "\n" + `    app: registry` + "\n" + `  ports:` + "\n" + `    - name: registry` + "\n" + `      protocol: TCP` + "\n" + `      port: 5002` + "\n" + `      targetPort: 5002` + "\n" + `EOF`)
	r.Run(`kubectl apply -f registry-service.yaml`)
	r.Run(`node=$(kubectl get pods -n nsm-system -l app=nsmgr-proxy -o go-template='{{index (index (index  .items 0) "spec") "nodeName"}}')`)
	r.Run(`ip=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "ExternalIP"}}{{.address}}{{end}}{{end}}')` + "\n" + `echo Selected node IP: ${ip:=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "InternalIP"}}{{.address}}{{end}}{{end}}')}`)
	r.Run(`cat > nsmgr-proxy-service.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: v1` + "\n" + `kind: Service` + "\n" + `metadata:` + "\n" + `  namespace: nsm-system` + "\n" + `  name: nsmgr-proxy` + "\n" + `spec:` + "\n" + `  externalIPs:` + "\n" + `    - $ip` + "\n" + `  selector:` + "\n" + `    app: nsmgr-proxy` + "\n" + `  ports:` + "\n" + `    - protocol: TCP` + "\n" + `      port: 5004` + "\n" + `      targetPort: 5004` + "\n" + `` + "\n" + `EOF`)
	r.Run(`kubectl apply -f nsmgr-proxy-service.yaml`)
	r.Run(`export KUBECONFIG=$KUBECONFIG2`)
	r.Run(`kubectl create ns nsm-system`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/registry-k8s-sa \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:registry-k8s-sa`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/nsmgr-proxy-sa \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:nsmgr-proxy-sa`)
	r.Run(`kubectl apply -k .`)
	r.Run(`node=$(kubectl get pods -n nsm-system -l app=registry -o go-template='{{index (index (index  .items 0) "spec") "nodeName"}}')`)
	r.Run(`ip=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "ExternalIP"}}{{.address}}{{end}}{{end}}')` + "\n" + `echo Selected node IP: ${ip:=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "InternalIP"}}{{.address}}{{end}}{{end}}')}`)
	r.Run(`cat > registry-service.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: v1` + "\n" + `kind: Service` + "\n" + `metadata:` + "\n" + `  namespace: nsm-system` + "\n" + `  name: registry` + "\n" + `spec:` + "\n" + `  externalIPs:` + "\n" + `    - $ip` + "\n" + `  selector:` + "\n" + `    app: registry` + "\n" + `  ports:` + "\n" + `    - name: registry` + "\n" + `      protocol: TCP` + "\n" + `      port: 5002` + "\n" + `      targetPort: 5002` + "\n" + `EOF`)
	r.Run(`kubectl apply -f registry-service.yaml`)
	r.Run(`node=$(kubectl get pods -n nsm-system -l app=nsmgr-proxy -o go-template='{{index (index (index  .items 0) "spec") "nodeName"}}')`)
	r.Run(`ip=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "ExternalIP"}}{{.address}}{{end}}{{end}}')` + "\n" + `echo Selected node IP: ${ip:=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "InternalIP"}}{{.address}}{{end}}{{end}}')}`)
	r.Run(`cat > nsmgr-proxy-service.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: v1` + "\n" + `kind: Service` + "\n" + `metadata:` + "\n" + `  namespace: nsm-system` + "\n" + `  name: nsmgr-proxy` + "\n" + `spec:` + "\n" + `  externalIPs:` + "\n" + `    - $ip` + "\n" + `  selector:` + "\n" + `    app: nsmgr-proxy` + "\n" + `  ports:` + "\n" + `    - protocol: TCP` + "\n" + `      port: 5004` + "\n" + `      targetPort: 5004` + "\n" + `` + "\n" + `EOF`)
	r.Run(`kubectl apply -f nsmgr-proxy-service.yaml`)
	r.Run(`export KUBECONFIG=$KUBECONFIG3`)
	r.Run(`kubectl create ns nsm-system`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/nsm-system/sa/registry-k8s-sa \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:nsm-system \` + "\n" + `-selector k8s:sa:registry-k8s-sa`)
	r.Run(`kubectl apply -k ./floating-registry`)
	r.Run(`node=$(kubectl get pods -n nsm-system -l app=registry -o go-template='{{index (index (index  .items 0) "spec") "nodeName"}}')`)
	r.Run(`ip=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "ExternalIP"}}{{.address}}{{end}}{{end}}')` + "\n" + `echo Selected node IP: ${ip:=$(kubectl get nodes $node -o go-template='{{range .status.addresses}}{{if eq .type "InternalIP"}}{{.address}}{{end}}{{end}}')}`)
	r.Run(`cat > registry-service.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: v1` + "\n" + `kind: Service` + "\n" + `metadata:` + "\n" + `  namespace: nsm-system` + "\n" + `  name: registry` + "\n" + `spec:` + "\n" + `  externalIPs:` + "\n" + `    - $ip` + "\n" + `  selector:` + "\n" + `    app: registry` + "\n" + `  ports:` + "\n" + `    - name: registry` + "\n" + `      protocol: TCP` + "\n" + `      port: 5002` + "\n" + `      targetPort: 5002` + "\n" + `EOF`)
	r.Run(`kubectl apply -f registry-service.yaml`)
}
func (s *Suite) TestKernel2Vxlan2Kernel() {
	r := s.Runner("../deployments-k8s/examples/floating/usecases/Kernel2Vxlan2Kernel")
	s.T().Cleanup(func() {
		r.Run(`export KUBECONFIG=$KUBECONFIG2`)
		r.Run(`kubectl delete ns ${NAMESPACE1}`)
		r.Run(`export KUBECONFIG=$KUBECONFIG1`)
		r.Run(`kubectl delete ns ${NAMESPACE2}`)
	})
	r.Run(`export KUBECONFIG=$KUBECONFIG2`)
	r.Run(`NAMESPACE1=($(kubectl create -f ../namespace.yaml)[0])` + "\n" + `NAMESPACE1=${NAMESPACE1:10}`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/${NAMESPACE1}/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:${NAMESPACE1} \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`cat > kustomization.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: kustomize.config.k8s.io/v1beta1` + "\n" + `kind: Kustomization` + "\n" + `` + "\n" + `namespace: ${NAMESPACE1}` + "\n" + `` + "\n" + `bases:` + "\n" + `- ../../../../apps/nse-kernel` + "\n" + `` + "\n" + `patchesStrategicMerge:` + "\n" + `- patch-nse.yaml` + "\n" + `EOF`)
	r.Run(`cat > patch-nse.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: apps/v1` + "\n" + `kind: Deployment` + "\n" + `metadata:` + "\n" + `  name: nse-kernel` + "\n" + `spec:` + "\n" + `  template:` + "\n" + `    metadata:` + "\n" + `      annotations:` + "\n" + `        registration-name: icmp-server@my.cluster3` + "\n" + `    spec:` + "\n" + `      containers:` + "\n" + `        - name: nse` + "\n" + `          env:` + "\n" + `          - name: NSM_NAME` + "\n" + `            valueFrom:` + "\n" + `              fieldRef:` + "\n" + `                fieldPath: metadata.annotations['registration-name']` + "\n" + `          - name: NSM_CIDR_PREFIX` + "\n" + `            value: 172.16.1.2/31` + "\n" + `          - name: NSM_SERVICE_NAMES` + "\n" + `            value: icmp-responder@my.cluster3` + "\n" + `EOF`)
	r.Run(`kubectl apply -k .`)
	r.Run(`NSE=$(kubectl get pods -l app=nse-kernel -n ${NAMESPACE1} --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')`)
	r.Run(`export KUBECONFIG=$KUBECONFIG1`)
	r.Run(`NAMESPACE2=($(kubectl create -f ../namespace.yaml)[0])` + "\n" + `NAMESPACE2=${NAMESPACE2:10}`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/${NAMESPACE2}/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:${NAMESPACE2} \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`cat > kustomization.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: kustomize.config.k8s.io/v1beta1` + "\n" + `kind: Kustomization` + "\n" + `` + "\n" + `namespace: ${NAMESPACE2}` + "\n" + `` + "\n" + `bases:` + "\n" + `- ../../../../apps/nsc-kernel` + "\n" + `` + "\n" + `patchesStrategicMerge:` + "\n" + `- patch-nsc.yaml` + "\n" + `EOF`)
	r.Run(`cat > patch-nsc.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: apps/v1` + "\n" + `kind: Deployment` + "\n" + `metadata:` + "\n" + `  name: nsc-kernel` + "\n" + `spec:` + "\n" + `  template:` + "\n" + `    spec:` + "\n" + `      containers:` + "\n" + `        - name: nsc` + "\n" + `          env:` + "\n" + `            - name: NSM_NETWORK_SERVICES` + "\n" + `              value: kernel://icmp-responder@my.cluster3/nsm-1` + "\n" + `EOF`)
	r.Run(`kubectl apply -k .`)
	r.Run(`kubectl wait --for=condition=ready --timeout=5m pod -l app=nsc-kernel -n ${NAMESPACE2}`)
	r.Run(`NSC=$(kubectl get pods -l app=nsc-kernel -n ${NAMESPACE2} --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')`)
	r.Run(`export KUBECONFIG=$KUBECONFIG1`)
	r.Run(`kubectl exec ${NSC} -n ${NAMESPACE2} -- ping -c 4 172.16.1.2`)
	r.Run(`export KUBECONFIG=$KUBECONFIG2`)
	r.Run(`kubectl exec ${NSE} -n ${NAMESPACE1} -- ping -c 4 172.16.1.3`)
}

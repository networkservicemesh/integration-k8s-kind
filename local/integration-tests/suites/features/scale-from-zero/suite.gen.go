// Code generated by gotestmd DO NOT EDIT.
package scale_from_zero

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
)

type Suite struct {
	base.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
	r := s.Runner("../deployments-k8s/examples/features/scale-from-zero")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ${NAMESPACE}`)
		r.Run(`kubectl delete -n nsm-system networkservices.networkservicemesh.io autoscale-icmp-responder`)
	})
	r.Run(`NAMESPACE=($(kubectl create -f ../namespace.yaml)[0])` + "\n" + `NAMESPACE=${NAMESPACE:10}`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/${NAMESPACE}/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:${NAMESPACE} \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`NODES=($(kubectl get nodes -o go-template='{{range .items}}{{ if not .spec.taints }}{{ .metadata.name }} {{end}}{{end}}'))` + "\n" + `NSC_NODE=${NODES[0]}` + "\n" + `SUPPLIER_NODE=${NODES[1]}` + "\n" + `if [ "$SUPPLIER_NODE" == "" ]; then SUPPLIER_NODE=$NSC_NODE; echo "Only 1 node found, testing that pod is created on the same node is useless"; fi`)
	r.Run(`cat > patch-nsc.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: apps/v1` + "\n" + `kind: Deployment` + "\n" + `metadata:` + "\n" + `  name: nsc-kernel` + "\n" + `spec:` + "\n" + `  template:` + "\n" + `    spec:` + "\n" + `      nodeName: $NSC_NODE` + "\n" + `      containers:` + "\n" + `        - name: nsc` + "\n" + `          env:` + "\n" + `            - name: NSM_NETWORK_SERVICES` + "\n" + `              value: kernel://autoscale-icmp-responder/nsm-1` + "\n" + `            - name: NSM_REQUEST_TIMEOUT` + "\n" + `              value: 30s` + "\n" + `EOF`)
	r.Run(`cat > patch-supplier.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: apps/v1` + "\n" + `kind: Deployment` + "\n" + `metadata:` + "\n" + `  name: nse-supplier-k8s` + "\n" + `spec:` + "\n" + `  template:` + "\n" + `    spec:` + "\n" + `      nodeName: $SUPPLIER_NODE` + "\n" + `      containers:` + "\n" + `        - name: nse-supplier` + "\n" + `          env:` + "\n" + `            - name: NSE_SERVICE_NAME` + "\n" + `              value: autoscale-icmp-responder` + "\n" + `            - name: NSE_LABELS` + "\n" + `              value: app:supplier` + "\n" + `            - name: NSE_NAMESPACE` + "\n" + `              valueFrom:` + "\n" + `                fieldRef:` + "\n" + `                  fieldPath: metadata.namespace` + "\n" + `            - name: NSE_POD_DESCRIPTION_FILE` + "\n" + `              value: /run/supplier/pod-template.yaml` + "\n" + `          volumeMounts:` + "\n" + `            - name: pod-file` + "\n" + `              mountPath: /run/supplier` + "\n" + `              readOnly: true` + "\n" + `      volumes:` + "\n" + `        - name: pod-file` + "\n" + `          configMap:` + "\n" + `            name: supplier-pod-template-configmap` + "\n" + `EOF`)
	r.Run(`cat > kustomization.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: kustomize.config.k8s.io/v1beta1` + "\n" + `kind: Kustomization` + "\n" + `` + "\n" + `namespace: $NAMESPACE` + "\n" + `` + "\n" + `bases:` + "\n" + `- ../../../apps/nse-supplier-k8s` + "\n" + `- ../../../apps/nsc-kernel` + "\n" + `` + "\n" + `patchesStrategicMerge:` + "\n" + `- patch-nsc.yaml` + "\n" + `- patch-supplier.yaml` + "\n" + `` + "\n" + `configMapGenerator:` + "\n" + `  - name: supplier-pod-template-configmap` + "\n" + `    files:` + "\n" + `      - pod-template.yaml` + "\n" + `EOF`)
	r.Run(`kubectl apply -f autoscale-netsvc.yaml`)
	r.Run(`kubectl apply -k .`)
	r.Run(`kubectl wait -n $NAMESPACE --for=condition=ready --timeout=1m pod -l app=nse-supplier-k8s`)
	r.Run(`kubectl wait -n $NAMESPACE --for=condition=ready --timeout=1m pod -l app=nsc-kernel`)
	r.Run(`kubectl wait -n $NAMESPACE --for=condition=ready --timeout=1m pod -l app=nse-icmp-responder`)
	r.Run(`NSC=$(kubectl get pod -n $NAMESPACE --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' -l app=nsc-kernel)` + "\n" + `NSE=$(kubectl get pod -n $NAMESPACE --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' -l app=nse-icmp-responder)`)
	r.Run(`kubectl exec $NSC -n $NAMESPACE -- ping -c 4 169.254.0.0`)
	r.Run(`kubectl exec $NSE -n $NAMESPACE -- ping -c 4 169.254.0.1`)
	r.Run(`NSE_NODE=$(kubectl get pod -n $NAMESPACE --template '{{range .items}}{{.spec.nodeName}}{{"\n"}}{{end}}' -l app=nse-icmp-responder)`)
	r.Run(`if [ $NSC_NODE == $NSE_NODE ]; then echo "OK"; else echo "different nodes"; false; fi`)
	r.Run(`kubectl scale -n $NAMESPACE deployment nsc-kernel --replicas=0`)
	r.Run(`kubectl wait -n $NAMESPACE --for=delete --timeout=1m pod -l app=nse-icmp-responder`)
}
func (s *Suite) Test() {}

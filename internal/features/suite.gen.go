// Code generated by gotestmd DO NOT EDIT.
package features

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/basic"
)

type Suite struct {
	base.Suite
	basicSuite basic.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite, &s.basicSuite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
}
func (s *Suite) TestDns() {
	r := s.Runner("../deployments-k8s/examples/features/dns")
	s.T().Cleanup(func() {
		r.Run(`kubectl delete ns ${NAMESPACE}`)
	})
	r.Run(`WH=$(kubectl get pods -l app=admission-webhook-k8s -n nsm-system --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')` + "\n" + `kubectl wait --for=condition=ready --timeout=1m pod ${WH} -n nsm-system`)
	r.Run(`NAMESPACE=($(kubectl create -f ../../use-cases/namespace.yaml)[0])` + "\n" + `NAMESPACE=${NAMESPACE:10}`)
	r.Run(`kubectl exec -n spire spire-server-0 -- \` + "\n" + `/opt/spire/bin/spire-server entry create \` + "\n" + `-spiffeID spiffe://example.org/ns/${NAMESPACE}/sa/default \` + "\n" + `-parentID spiffe://example.org/ns/spire/sa/spire-agent \` + "\n" + `-selector k8s:ns:${NAMESPACE} \` + "\n" + `-selector k8s:sa:default`)
	r.Run(`NODES=($(kubectl get nodes -o go-template='{{range .items}}{{ if not .spec.taints  }}{{index .metadata.labels "kubernetes.io/hostname"}} {{end}}{{end}}'))`)
	r.Run(`cat > alpine.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: v1` + "\n" + `kind: Pod` + "\n" + `metadata:` + "\n" + `  name: alpine` + "\n" + `  annotations:` + "\n" + `    networkservicemesh.io: kernel://my-coredns-service/nsm-1` + "\n" + `  labels:` + "\n" + `    app: alpine` + "\n" + `spec:` + "\n" + `  containers:` + "\n" + `  - name: alpine` + "\n" + `    image: alpine` + "\n" + `    stdin: true` + "\n" + `    tty: true` + "\n" + `  nodeSelector:` + "\n" + `    kubernetes.io/hostname: ${NODES[0]}` + "\n" + `EOF`)
	r.Run(`cat > patch-nse.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: apps/v1` + "\n" + `kind: Deployment` + "\n" + `metadata:` + "\n" + `  name: nse-kernel` + "\n" + `spec:` + "\n" + `  template:` + "\n" + `    spec:` + "\n" + `      containers:` + "\n" + `      - name: nse` + "\n" + `        env:` + "\n" + `          - name: NSM_SERVICE_NAMES` + "\n" + `            value: my-coredns-service` + "\n" + `          - name: NSM_CIDR_PREFIX` + "\n" + `            value: 172.16.1.100/31` + "\n" + `          - name: NSM_DNS_CONFIGS` + "\n" + `            value: "[{\"dns_server_ips\": [\"172.16.1.100\"], \"search_domains\": [\"my.coredns.service\"]}]"` + "\n" + `      - name: coredns` + "\n" + `        image: coredns/coredns:1.8.3` + "\n" + `        imagePullPolicy: IfNotPresent` + "\n" + `        resources:` + "\n" + `          limits:` + "\n" + `            memory: 170Mi` + "\n" + `          requests:` + "\n" + `            cpu: 100m` + "\n" + `            memory: 70Mi` + "\n" + `        args: [ "-conf", "/etc/coredns/Corefile" ]` + "\n" + `        volumeMounts:` + "\n" + `        - name: config-volume` + "\n" + `          mountPath: /etc/coredns` + "\n" + `          readOnly: true` + "\n" + `        ports:` + "\n" + `        - containerPort: 53` + "\n" + `          name: dns` + "\n" + `          protocol: UDP` + "\n" + `        - containerPort: 53` + "\n" + `          name: dns-tcp` + "\n" + `          protocol: TCP` + "\n" + `      nodeSelector:` + "\n" + `        kubernetes.io/hostname: ${NODES[1]}` + "\n" + `      volumes:` + "\n" + `        - name: config-volume` + "\n" + `          configMap:` + "\n" + `            name: coredns` + "\n" + `            items:` + "\n" + `            - key: Corefile` + "\n" + `              path: Corefile` + "\n" + `EOF`)
	r.Run(`cat > kustomization.yaml <<EOF` + "\n" + `---` + "\n" + `apiVersion: kustomize.config.k8s.io/v1beta1` + "\n" + `kind: Kustomization` + "\n" + `` + "\n" + `namespace: ${NAMESPACE}` + "\n" + `` + "\n" + `bases:` + "\n" + `- ../../../apps/nse-kernel` + "\n" + `` + "\n" + `resources:` + "\n" + `- alpine.yaml` + "\n" + `- coredns-config-map.yaml` + "\n" + `` + "\n" + `patchesStrategicMerge:` + "\n" + `- patch-nse.yaml` + "\n" + `EOF`)
	r.Run(`kubectl apply -k .`)
	r.Run(`kubectl wait --for=condition=ready --timeout=5m pod alpine -n ${NAMESPACE}`)
	r.Run(`kubectl wait --for=condition=ready --timeout=5m pod -l app=nse-kernel -n ${NAMESPACE}`)
	r.Run(`NSC=$(kubectl get pods -l app=alpine -n ${NAMESPACE} --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')`)
	r.Run(`NSE=$(kubectl get pods -l app=nse-kernel -n ${NAMESPACE} --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')`)
	r.Run(`kubectl exec ${NSC} -c alpine -n ${NAMESPACE} -- sh -c "apk update && apk add bind-tools"`)
	r.Run(`kubectl exec ${NSC} -c alpine -n ${NAMESPACE} -- nslookup -nodef -norec my.coredns.service`)
	r.Run(`kubectl exec ${NSC} -c alpine -n ${NAMESPACE} -- ping -c 4 my.coredns.service`)
	r.Run(`kubectl exec ${NSC} -c alpine -n ${NAMESPACE} -- nslookup -nodef google.com`)
}
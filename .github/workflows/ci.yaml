---
name: ci
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1
      - name: Install yamllint
        run: pip install --user yamllint
      - name: Run yamllint
        run: ~/.local/bin/yamllint -c .yamllint.yml --strict .
  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: shellcheck
        uses: fkautz/shell-linter@v1.0.1
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.35
  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go --exclude=*.pb.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi
  checkgomod:
    name: check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: go mod tidy
      - name: Check for changes in go.mod or go.sum
        run: |
          git diff --name-only --exit-code go.mod || ( echo "Run go tidy" && false )
          git diff --name-only --exit-code go.sum || ( echo "Run go tidy" && false )
  automerge:
    name: automerge
    runs-on: ubuntu-latest
    needs:
      - kind
    if: github.actor == 'nsmbot' && github.event_name == 'pull_request'
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
      - name: Fetch master
        run: |
          git remote -v
          git fetch --depth=1 origin master
      - name: Only allow go.mod and go.sum changes
        run: |
          find . -type f ! -name 'go.mod' ! -name 'go.sum' ! -name '*.yaml' ! -name '*.yml' -exec git diff --exit-code origin/master -- {} +
      - name: Automerge nsmbot PR
        uses: ridedott/merge-me-action@master
        with:
          GITHUB_LOGIN: nsmbot
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  kind:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/setup-go@v1
        with:
          go-version: 1.15
          github-token: ${{ github.token }}
      - name: Set go env
        run: |
          echo GOPATH=$GITHUB_WORKSPACE >> $GITHUB_ENV
          echo GO111MODULE=on >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE/bin >> $GITHUB_PATH
      - uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - uses: engineerd/setup-kind@v0.5.0
        with:
          config: src/github.com/${{ github.repository }}/cluster-config.yaml
      - name: Check kind cluster
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - name: Integration tests
        run: |
          go test -count 1 -timeout 20m -race -v ./...
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
#  update-dependent-repositories:
#    continue-on-error: true
#    strategy:
#      fail-fast: false
#      matrix:
#        repository:
#          - integration-k8s-packet
#    name: Update ${{ matrix.repository }}
#    runs-on: ubuntu-latest
#    needs:
#      - automerge
#    if: github.actor == 'nsmbot' && github.base_ref == 'master' && github.event_name == 'pull_request'
#    steps:
#      - name: Checkout ${{ github.repository }}
#        uses: actions/checkout@v2
#        with:
#          path: ${{ github.repository }}
#          ref: master
#          fetch-depth: '0'
#      - name: Create commit message
#        working-directory: ${{ github.repository }}
#        run: |
#          echo "Update go.mod and go.sum to latest version from ${{ github.repository }}@master ${{ github.repository }}#${{ github.event.number }}" >> /tmp/commit-message
#          echo "" >> /tmp/commit-message
#          echo "${{ github.repository }} PR link: https://github.com/${{ github.repository }}/pull/${{ github.event.number }}" >> /tmp/commit-message
#          echo "" >> /tmp/commit-message
#          echo "${{ github.repository }} commit message:" >> /tmp/commit-message
#          git log -1 >> /tmp/commit-message
#          echo "Commit Message:"
#          cat /tmp/commit-message
#      - uses: actions/setup-go@v1
#        with:
#          go-version: 1.15
#      - name: Get current integration-tests version
#        id: get-integration-tests-version
#        working-directory: ${{ github.repository }}
#        run: |
#          echo "::set-output name=value::$(go list -m -f '{{ .Version }}' github.com/networkservicemesh/integration-tests)"
#      - name: Checkout networkservicemesh/${{ matrix.repository }}
#        uses: actions/checkout@v2
#        with:
#          path: networkservicemesh/${{ matrix.repository }}
#          repository: networkservicemesh/${{ matrix.repository }}
#          token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}
#      - name: Update networkservicemesh/${{ matrix.repository }} locally
#        working-directory: networkservicemesh/${{ matrix.repository }}
#        run: |
#          GOPRIVATE=github.com/networkservicemesh go get github.com/networkservicemesh/integration-tests@${{ steps.get-integration-tests-version.outputs.value }}
#          go mod tidy
#          git diff
#      - name: Push update to the ${{ matrix.repository }}
#        working-directory: networkservicemesh/${{ matrix.repository }}
#        run: |
#          echo Starting to update repositotry ${{ matrix.repository }}
#          git config --global user.email "nsmbot@networkservicmesh.io"
#          git config --global user.name "NSMBot"
#          git add go.mod go.sum
#          if ! [ -n "$(git diff --cached --exit-code)" ]; then
#            echo ${{ matrix.repository }} is up to date
#            exit 0;
#          fi
#          git commit -s -F /tmp/commit-message
#          git checkout -b update/${{ github.repository }}
#          git push -f origin update/${{ github.repository }}
